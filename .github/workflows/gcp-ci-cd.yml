name: GCP CI/CD (build -> push -> manual deploy to GKE)

on:
  push:
    branches: [ main, feature/cd-pipeline ]
  workflow_dispatch: {}

env:
  IMAGE_NAME: iris-api

jobs:
  build-and-push:
    name: Build and push image to Artifact Registry
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ steps.image.outputs.IMAGE }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud --quiet auth configure-docker ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./week-2
          file: ./week-2/Dockerfile
          push: true
          tags: ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Set output image
        id: image
        run: echo "IMAGE=${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-to-gke:
    name: Deploy to GKE (manual approval)
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.cloud.google.com/kubernetes
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: gcloud auth & config
        run: |
          echo "-- ENV VARS --"
          env | sort
          echo "\n-- gcloud auth list --"
          gcloud auth list || true
          echo "\n-- gcloud config list --"
          gcloud config list || true
          echo "\n-- print project from secrets --"
          echo "GCP_PROJECT=${{ secrets.GCP_PROJECT }}"
          echo "GKE_LOCATION=${{ secrets.GKE_LOCATION }}"
          echo "GKE_CLUSTER=${{ secrets.GKE_CLUSTER }}"

      - name: list regional clusters
        run: |
          echo "Listing clusters in region: ${{ secrets.GKE_LOCATION }}"
          gcloud container clusters list --region=${{ secrets.GKE_LOCATION }} --project=${{ secrets.GCP_PROJECT }} || true

      - name: Get GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_LOCATION }}
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Update deployment image and rollout
        run: |
          # Reconstruct the image name here (avoid relying on job outputs which may be empty)
          IMAGE=${{ secrets.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Computed IMAGE=${IMAGE}"

          # If deployment exists, update image; otherwise substitute and apply manifest to create it.
          if kubectl get deployment iris-deployment --namespace=default > /dev/null 2>&1; then
            echo "Deployment exists — setting image"
            kubectl set image deployment/iris-deployment iris-api=${IMAGE} --namespace=default
          else
            echo "Deployment not found — creating from manifest (substituting image)"
            sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/iris-deployment.yaml
            kubectl apply -f k8s/iris-deployment.yaml
          fi

          # Ensure service exists (create if missing)
          kubectl apply -f k8s/iris-service.yaml

          # Wait for rollout
          kubectl rollout status deployment/iris-deployment --namespace=default --timeout=180s
